{"version":3,"sources":["components/MemoryCard.js","components/GameBoard.js","components/NewGame.js","components/PlayAgain.js","App.js","index.js"],"names":["MemoryCard","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","flipCard","e","props","found","flipped","flip","target","id","inherits","createClass","key","value","_this$props","imgUrl","react_default","a","createElement","className","react_card_flip_default","isFlipped","flipDirection","onClick","style","cardBack","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","backgroundColor","cursor","Component","background","GameBoard","state","memoryCards","countFlippedCards","filter","_ref","cb","setState","prevState","memorycards","map","card","handleFlip","click","isMatch","flippedCards","matchesId","hasWon","setTimeout","indexOf","every","won","createBoard","components_MemoryCard","url","prevProps","cards","NewGame","visible","handleClick","play","visibility","PlayAgain","again","App","initState","countClicks","clicks","generateDeck","i","amount","createId","id2","rand","Math","floor","random","card1","card2","push","shuffleCards","j","resetGame","initGame","newGame","_this$state","components_GameBoard","components_NewGame","toString","substring","ReactDOM","render","react_router_dom","react_router","exact","path","component","document","getElementById"],"mappings":"0PAGaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEEQ,SAAW,SAAAC,GACLhB,EAAKiB,MAAMC,OAASlB,EAAKiB,MAAME,SACnCnB,EAAKiB,MAAMG,KAAKJ,EAAEK,OAAOC,KAJ7BtB,EAAA,OAAAC,OAAAsB,EAAA,EAAAtB,CAAAJ,EAAAC,GAAAG,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA,EAAA4B,IAAA,SAAAC,MAAA,WAOW,IAAAC,EACgCxB,KAAKc,MAApCK,EADDK,EACCL,GAAIM,EADLD,EACKC,OAAQT,EADbQ,EACaR,QAASD,EADtBS,EACsBT,MAC7B,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAeI,UAAWf,EAASgB,cAAc,cAC/CN,EAAAC,EAAAC,cAAA,OAAKT,GAAIA,EACPU,UAAU,mBACVI,QAASjC,KAAKY,SACdsB,MAAOC,EACPb,IAAI,UAENI,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVI,QAASjC,KAAKY,SACdU,IAAI,OACJY,MAAO,CACLE,gBAAe,OAAAzB,OAASc,EAAT,KACfY,eAAgB,UAChBC,iBAAkB,YAAaC,mBAAoB,SACnDC,gBAAiBzB,EAAQ,QAAU,UACnC0B,OAAS1B,EAAQ,GAAK,mBA3BpCrB,EAAA,CAAgCgD,aAqC1BP,EAAW,CACfQ,WAAY,WAICjD,IC0EAkD,EApHf,SAAAjD,GAAA,SAAAiD,IAAA,IAAAhD,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,GAAA,QAAA3C,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA8C,IAAAnC,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEEyC,MAAQ,CACNC,YAAa,IAHjBjD,EAoBEkD,kBAAoB,WAElB,OADwBlD,EAAKgD,MAArBC,YACWE,OAAO,SAAAC,GAAA,IAAGjC,EAAHiC,EAAGjC,QAASD,EAAZkC,EAAYlC,MAAZ,OAAwBC,IAAYD,IAAOZ,QAtBzEN,EAyBEe,SAAW,SAACO,EAAI+B,GACdrD,EAAKsD,SAAS,SAAAC,GAAS,MACrB,CACEC,YAAaD,EAAUN,YAAYQ,IAAI,SAAAC,GAIrC,OAHIA,EAAKpC,KAAOA,IACdoC,EAAKvC,SAAU,GAEVuC,MAEP,kBAAML,EAAKA,IAAO,QAlC5BrD,EAsCE2D,WAAa,SAAArC,GACX,OAAQtB,EAAKkD,qBACX,KAAK,EACHlD,EAAKe,SAASO,GACd,MACF,KAAK,EACHtB,EAAKiB,MAAM2C,QACX5D,EAAKe,SAASO,EAAI,WAChBtB,EAAK6D,cA9Cf7D,EAsDE6D,QAAU,WAAM,IACNZ,EAAgBjD,EAAKgD,MAArBC,YACFa,EAAeb,EAAYE,OAAO,SAAAO,GAAI,OAAIA,EAAKvC,UAAYuC,EAAKxC,QAClE4C,EAAa,GAAGC,YAAcD,EAAa,GAAGxC,IAChDwC,EAAa,GAAGC,YAAcD,EAAa,GAAGxC,GAC9CtB,EAAKsD,SAAS,SAAAC,GAAS,MAAK,CAC1BN,YAAaM,EAAUN,YAAYQ,IAAI,SAAAC,GACrC,OAAQA,EAAKpC,IACX,KAAKwC,EAAa,GAAGxC,GACrB,KAAKwC,EAAa,GAAGxC,GAEnB,OADAoC,EAAKxC,OAAQ,EACNwC,EACT,QACE,OAAOA,OAGX,kBAAM1D,EAAKgE,WAEfC,WAAW,WACThB,EAAYA,EAAYiB,QAAQJ,EAAa,KAAK3C,SAAU,EAC5D8B,EAAYA,EAAYiB,QAAQJ,EAAa,KAAK3C,SAAU,EAC5DnB,EAAKsD,SAAS,CACZL,YAAaA,KAEd,MA9ETjD,EAmFEgE,OAAS,WACiBhE,EAAKgD,MAArBC,YACckB,MAAM,SAAAT,GAAI,OAAIA,EAAKxC,SAEvClB,EAAKiB,MAAMmD,OAvFjBpE,EA4FEqE,YAAc,kBACZrE,EAAKgD,MAAMC,YAAY3C,OACrBN,EAAKgD,MAAMC,YAAYQ,IAAI,SAAAC,GAAI,OAC7B7B,EAAAC,EAAAC,cAACuC,EAAD,CACE7C,IAAKiC,EAAKpC,GACVH,QAASuC,EAAKvC,QACdD,MAAOwC,EAAKxC,MACZI,GAAIoC,EAAKpC,GACTM,OAAQ8B,EAAKa,IACbnD,KAAMpB,EAAK2D,eAGb9B,EAAAC,EAAAC,cAAA,8BAxGR/B,EAAA,OAAAC,OAAAsB,EAAA,EAAAtB,CAAA8C,EAAAjD,GAAAG,OAAAuB,EAAA,EAAAvB,CAAA8C,EAAA,EAAAtB,IAAA,qBAAAC,MAAA,SAMqB8C,EAAWjB,GACxBA,EAAUN,cAAgB9C,KAAK6C,MAAMC,aACvC9C,KAAKmD,SAAS,CACZL,YAAa9C,KAAK6C,MAAMC,gBAThC,CAAAxB,IAAA,oBAAAC,MAAA,WAeIvB,KAAKmD,SAAS,CACZL,YAAa9C,KAAKc,MAAMwD,UAhB9B,CAAAhD,IAAA,SAAAC,MAAA,WA4GI,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZ7B,KAAKkE,mBA9GdtB,EAAA,CAA+BF,aCyBhB6B,EA1Bf,SAAA5E,GAAA,SAAA4E,IAAA,IAAA3E,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuE,GAAA,QAAAtE,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAyE,IAAA9D,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEEyC,MAAQ,CACN2B,SAAS,GAHb3E,EAME4E,YAAc,SAAA5D,GACZhB,EAAKsD,SAAS,CAAEqB,SAAU3E,EAAKgD,MAAM2B,SAAW,WAC9C3E,EAAKiB,MAAM4D,UARjB7E,EAAA,OAAAC,OAAAsB,EAAA,EAAAtB,CAAAyE,EAAA5E,GAAAG,OAAAuB,EAAA,EAAAvB,CAAAyE,EAAA,EAAAjD,IAAA,SAAAC,MAAA,WAYW,IACCiD,EAAYxE,KAAK6C,MAAjB2B,QACR,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBI,QAASjC,KAAKyE,YACdvC,MAAO,CAAEyC,WAAYH,EAAU,UAAY,WAF7C,aAhBRD,EAAA,CAA6B7B,aCAd,SAASkC,EAAT3B,GAA8B,IAAT4B,EAAS5B,EAAT4B,MAGhC,OACInD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMI,QAAS,kBAAM4C,MAAvC,oBCFNC,6MAUJjC,MAAQiC,EAAIC,cAEZC,YAAc,WACZnF,EAAKsD,SAAS,SAACC,GAAD,MAAgB,CAC1B6B,OAAS7B,EAAU6B,OAAS,QAIlCC,aAAe,WAGb,IAFA,IACIZ,EAAQ,GACHa,EAAI,EAAGA,EAAIC,GAAYD,IAAK,CACnC,IAAIhE,EAAKkE,IACLC,EAAMD,IACNE,EAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EACvCC,EAAQ,CACZxE,GAAIA,EACJyC,UAAW0B,EACXlB,IAAG,4EAAAzD,OAA8E4E,EAA9E,QACHvE,SAAS,EACTD,OAAO,GAEH6E,EAAQ,CACZzE,GAAImE,EACJ1B,UAAWzC,EACXiD,IAAG,4EAAAzD,OAA8E4E,EAA9E,QACHvE,SAAS,EACTD,OAAO,GAETuD,EAAMuB,KAAKF,GACXrB,EAAMuB,KAAKD,GAEb/F,EAAKiG,aAAaxB,GAClBzE,EAAKsD,SAAS,CACZmB,MAAOA,OAIXwB,aAAe,SAACnE,GACd,IAAK,IAAIwD,EAAIxD,EAAExB,OAAS,EAAGgF,EAAI,EAAGA,IAAK,CACrC,IAAMY,EAAIP,KAAKC,MAAMD,KAAKE,UAAYP,EAAI,IADLlC,EAEtB,CAACtB,EAAEoE,GAAIpE,EAAEwD,IAAvBxD,EAAEwD,GAFkClC,EAAA,GAE9BtB,EAAEoE,GAF4B9C,EAAA,GAIvC,OAAOtB,KAGTqE,UAAY,WACVnG,EAAKsD,SAAS2B,EAAIC,YAAa,WAC7BlF,EAAKoG,gBAITpC,OAAS,WACPhE,EAAKsD,SAAS,CACZc,KAAK,OAITgC,SAAW,WACTpG,EAAKqF,eACLrF,EAAKsD,SAAS,CACZ+C,SAAS,6EAIJ,IAAAC,EACiCnG,KAAK6C,MAArCyB,EADD6B,EACC7B,MAAO4B,EADRC,EACQD,QAASjC,EADjBkC,EACiBlC,IAAKgB,EADtBkB,EACsBlB,OAC7B,OACEvD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZqE,EACExE,EAAAC,EAAAC,cAACwE,EAAD,CAAW9B,MAAOA,EAAOL,IAAKjE,KAAK6D,OAAQJ,MAAOzD,KAAKgF,cACtD,KACDkB,GAAYxE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,gBAA4CoD,IAG7DvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVoC,GAAQvC,EAAAC,EAAAC,cAAA,uBAEXF,EAAAC,EAAAC,cAACyE,EAAD,CAAS3B,KAAM1E,KAAKiG,WACnBhC,GAAQvC,EAAAC,EAAAC,cAACgD,EAAD,CAAWC,MAAO7E,KAAKgG,qBA3FxBtD,aAAZoC,EACGC,UAAY,WACjB,MAAO,CACLmB,SAAS,EACTjC,KAAK,EACLK,MAAO,GACPW,OAAS,IA4FAH,QAETO,EAAW,WACf,OAAOG,KAAKE,SAASY,SAAS,IAAIC,UAAU,EAAG,IAAMf,KAAKE,SAASY,SAAS,IAAIC,UAAU,EAAG,qBCpG/FC,IAASC,OACL/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,KACIhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACIjF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhC,MAE9BiC,SAASC,eAAe","file":"static/js/main.b34d3997.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\n\r\nexport class MemoryCard extends Component {\r\n\r\n  flipCard = e => {\r\n    if (this.props.found || this.props.flipped) return;\r\n    this.props.flip(e.target.id);\r\n  };\r\n\r\n  render() {\r\n    const { id, imgUrl, flipped, found } = this.props;\r\n    return (\r\n      <div className=\"card\">\r\n        <ReactCardFlip isFlipped={flipped} flipDirection=\"horizontal\">\r\n          <div id={id}\r\n            className=\"memoryCard front\"\r\n            onClick={this.flipCard}\r\n            style={cardBack}\r\n            key=\"front\"\r\n          />\r\n          <div\r\n            className=\"memoryCard\"\r\n            onClick={this.flipCard}\r\n            key=\"back\"\r\n            style={{\r\n              backgroundImage: `url(${imgUrl})`,\r\n              backgroundSize: \"contain\",\r\n              backgroundRepeat: \"no-repeat\", backgroundPosition: \"center\",\r\n              backgroundColor: found ? \"green\" : \"#3700B3\",\r\n              cursor : found ? \"\" : \"pointer\",\r\n            }}\r\n          >\r\n          </div>\r\n        </ReactCardFlip>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst cardBack = {\r\n  background: \"#3700B3\",\r\n}\r\n\r\n\r\nexport default MemoryCard;\r\n","import React, { Component } from 'react';\r\nimport MemoryCard from './MemoryCard';\r\n\r\nexport class GameBoard extends Component {\r\n\r\n  state = {\r\n    memoryCards: []\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.memoryCards !== this.state.memoryCards) {\r\n      this.setState({\r\n        memoryCards: this.state.memoryCards\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      memoryCards: this.props.cards\r\n    });\r\n  }\r\n\r\n  countFlippedCards = () => {\r\n    const { memoryCards } = this.state;\r\n    return memoryCards.filter(({ flipped, found }) => flipped && !found).length;\r\n  };\r\n\r\n  flipCard = (id, cb) => {\r\n    this.setState(prevState => (\r\n      {\r\n        memorycards: prevState.memoryCards.map(card => {\r\n          if (card.id === id) {\r\n            card.flipped = true;\r\n          }\r\n          return card;\r\n        })\r\n      }), () => cb ? cb() : null\r\n    );\r\n  };\r\n\r\n  handleFlip = id => {\r\n    switch (this.countFlippedCards()) {\r\n      case 0:\r\n        this.flipCard(id);\r\n        break;\r\n      case 1:\r\n        this.props.click();\r\n        this.flipCard(id, () => {\r\n          this.isMatch();\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  isMatch = () => {\r\n    const { memoryCards } = this.state;\r\n    const flippedCards = memoryCards.filter(card => card.flipped && !card.found);\r\n    if (flippedCards[0].matchesId === flippedCards[1].id ||\r\n      flippedCards[1].matchesId === flippedCards[0].id) {\r\n      this.setState(prevState => ({\r\n        memoryCards: prevState.memoryCards.map(card => {\r\n          switch (card.id) {\r\n            case flippedCards[0].id:\r\n            case flippedCards[1].id:\r\n              card.found = true;\r\n              return card;\r\n            default:\r\n              return card;\r\n          }\r\n        })\r\n      }), () => this.hasWon());\r\n    } else {\r\n      setTimeout(() => {\r\n        memoryCards[memoryCards.indexOf(flippedCards[0])].flipped = false;\r\n        memoryCards[memoryCards.indexOf(flippedCards[1])].flipped = false;\r\n        this.setState({\r\n          memoryCards: memoryCards\r\n        });\r\n      }, 800);\r\n    }\r\n  };\r\n\r\n\r\n  hasWon = () => {\r\n    const { memoryCards } = this.state;\r\n    let won = memoryCards.every(card => card.found);\r\n    if (won) {\r\n      this.props.won();\r\n    }\r\n  };\r\n\r\n\r\n  createBoard = () =>\r\n    this.state.memoryCards.length ? (\r\n      this.state.memoryCards.map(card => (\r\n        <MemoryCard\r\n          key={card.id}\r\n          flipped={card.flipped}\r\n          found={card.found}\r\n          id={card.id}\r\n          imgUrl={card.url}\r\n          flip={this.handleFlip} />\r\n      ))\r\n    ) : (\r\n        <p>Loading cards...</p>\r\n      );\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cards\">\r\n        {this.createBoard()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class NewGame extends Component {\r\n\r\n  state = {\r\n    visible: true,\r\n  }\r\n\r\n  handleClick = e => {\r\n    this.setState({ visible: !this.state.visible }, () => {\r\n      this.props.play()\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { visible } = this.state;\r\n    return (\r\n      <div className=\"menu-item\">\r\n        <button className=\"btn btn-play\"\r\n          onClick={this.handleClick}\r\n          style={{ visibility: visible ? \"visible\" : \"hidden\" }}>\r\n          Play\r\n        </button>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewGame;\r\n","import React from 'react'\r\n\r\nexport default function PlayAgain({ again }) {\r\n\r\n\r\n    return (\r\n        <div className=\"menu-item\">\r\n            <button className=\"btn\" onClick={() => again()}>Play again?</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport NewGame from \"./components/NewGame\";\r\nimport PlayAgain from './components/PlayAgain';\r\n\r\nclass App extends Component {\r\n  static initState = () => {\r\n    return {\r\n      newGame: false,\r\n      won: false,\r\n      cards: [],\r\n      clicks : 0\r\n    };\r\n  }\r\n\r\n  state = App.initState();\r\n\r\n  countClicks = () => {\r\n    this.setState((prevState) => ({\r\n        clicks : prevState.clicks + 1\r\n    }));\r\n  }\r\n\r\n  generateDeck = () => {\r\n    let amount = 10;\r\n    let cards = [];\r\n    for (let i = 1; i < amount + 1; i++) {\r\n      let id = createId();\r\n      let id2 = createId();\r\n      let rand = Math.floor(Math.random() * 300) + 1;\r\n      const card1 = {\r\n        id: id,\r\n        matchesId: id2,\r\n        url: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${rand}.png`,\r\n        flipped: false,\r\n        found: false,\r\n      }\r\n      const card2 = {\r\n        id: id2,\r\n        matchesId: id,\r\n        url: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${rand}.png`,\r\n        flipped: false,\r\n        found: false,\r\n      }\r\n      cards.push(card1);\r\n      cards.push(card2);\r\n    }\r\n    this.shuffleCards(cards);\r\n    this.setState({\r\n      cards: cards\r\n    });\r\n  }\r\n\r\n  shuffleCards = (a) => {\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n  }\r\n\r\n  resetGame = () => {\r\n    this.setState(App.initState(), () => {\r\n      this.initGame()\r\n    });\r\n  }\r\n\r\n  hasWon = () => {\r\n    this.setState({\r\n      won: true\r\n    });\r\n  };\r\n\r\n  initGame = () => {\r\n    this.generateDeck();\r\n    this.setState({\r\n      newGame: true\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { cards, newGame, won, clicks } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"board-container\">\r\n          {newGame ?\r\n            (<GameBoard cards={cards} won={this.hasWon} click={this.countClicks} />)\r\n            : null}\r\n            {newGame && (<p className=\"message center\">Total flips: {clicks}</p>)}\r\n        </div>\r\n\r\n        <div className=\"menu\">\r\n        <div className=\"message\">\r\n            {won && (<h2>You win!</h2>)}\r\n          </div>\r\n          <NewGame play={this.initGame} />\r\n          {won && (<PlayAgain again={this.resetGame} />)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nconst createId = () => {\r\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={App} />\n        </Switch>\n    </Router>, document.getElementById('root'));\n"],"sourceRoot":""}